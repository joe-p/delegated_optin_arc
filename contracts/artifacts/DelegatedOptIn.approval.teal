#pragma version 9

// This TEAL was generated by TEALScript v0.42.0
// https://github.com/algorand-devrel/TEALScript

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// setSignature(pay,byte[64])void
//
// Set the signature of the lsig for the given account
// 
// @param sig - The signature of the lsig
// @param boxMBRPayment - Payment to cover the contract MBR for box creation
abi_route_setSignature:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// boxMBRPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// sig: byte[64]
	txna ApplicationArgs 1

	// execute setSignature(pay,byte[64])void
	callsub setSignature
	int 1
	return

setSignature:
	proto 3 0

	// Record MBR before box_put to later determine the MBR delta
	// ./contracts/delegated_optin_app.algo.ts:20
	// preMBR = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_bury -3 // preMBR: uint64

	// ./contracts/delegated_optin_app.algo.ts:21
	// this.signatures(this.txn.sender).value = sig
	txn Sender
	frame_dig -1 // sig: byte[64]
	box_put

	// Verify box MBR payment
	// ./contracts/delegated_optin_app.algo.ts:24
	// assert(boxMBRPayment.receiver === globals.currentApplicationAddress)
	frame_dig -2 // boxMBRPayment: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// ./contracts/delegated_optin_app.algo.ts:25
	// assert(boxMBRPayment.amount >= globals.currentApplicationAddress.minBalance - preMBR)
	frame_dig -2 // boxMBRPayment: pay
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_dig -3 // preMBR: uint64
	-
	>=
	assert
	retsub

// delegatedOptIn(axfer,pay)void
//
// Verifies that the opt in is allowed
// 
// @param mbrPayment - Payment to the receiver that covers the ASA MBR
// @param optIn - The opt in transaction, presumably from the open opt-in lsig
abi_route_delegatedOptIn:
	// optIn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// mbrPayment: pay
	txn GroupIndex
	int 2
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute delegatedOptIn(axfer,pay)void
	callsub delegatedOptIn
	int 1
	return

delegatedOptIn:
	proto 2 0

	// Verify that the signature is present
	// ./contracts/delegated_optin_app.algo.ts:37
	// assert(this.signatures(optIn.sender).exists)
	frame_dig -2 // optIn: axfer
	gtxns Sender
	box_len
	swap
	pop
	assert
	retsub

// revokeSignature()void
//
// Delete the signature from box storage. This will disable delegated opt-ins and
// return the box MBR balance. This app should include an extra 0.001 ALGO to cover
// the inner transaction fee for the payment.
abi_route_revokeSignature:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute revokeSignature()void
	callsub revokeSignature
	int 1
	return

revokeSignature:
	proto 1 0

	// Record MBR before box_del to later determine the MBR delta
	// ./contracts/delegated_optin_app.algo.ts:47
	// preMBR = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_bury -1 // preMBR: uint64

	// ./contracts/delegated_optin_app.algo.ts:48
	// this.signatures(this.txn.sender).delete()
	txn Sender
	box_del

	// Return the box MBR
	// ./contracts/delegated_optin_app.algo.ts:51
	// sendPayment({
	//       fee: 0,
	//       amount: preMBR - globals.currentApplicationAddress.minBalance,
	//       receiver: this.txn.sender,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// ./contracts/delegated_optin_app.algo.ts:52
	// fee: 0
	int 0
	itxn_field Fee

	// ./contracts/delegated_optin_app.algo.ts:53
	// amount: preMBR - globals.currentApplicationAddress.minBalance
	frame_dig -1 // preMBR: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	-
	itxn_field Amount

	// ./contracts/delegated_optin_app.algo.ts:54
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// Submit inner transaction
	itxn_submit
	retsub

abi_route_defaultTEALScriptCreate:
	int 1
	return

create_NoOp:
	txn NumAppArgs
	bz abi_route_defaultTEALScriptCreate
	err

call_NoOp:
	method "setSignature(byte[64],pay)void"
	method "delegatedOptIn(pay,axfer)void"
	method "revokeSignature()void"
	txna ApplicationArgs 0
	match abi_route_setSignature abi_route_delegatedOptIn abi_route_revokeSignature
	err