#pragma version 9

txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

abi_route_createApplication:
	// no dupn needed
	callsub createApplication
	int 1
	return

createApplication:
	proto 0 0

	// TODO: Once we have global field for asset MBR, this can be removed
	// ./contracts/delegated_optin_app.algo.ts:17
	// this.assetMBR.set(100_000)
	byte "assetMBR"
	int 100_000
	app_global_put
	retsub

abi_route_updateAssetMBR:
	byte 0x; dup
	txna ApplicationArgs 1
	btoi
	txnas Assets
	callsub updateAssetMBR
	int 1
	return

updateAssetMBR:
	proto 3 0

	// TODO: Replace with global field for getting asset MBR
	// ./contracts/delegated_optin_app.algo.ts:28
	// preMbr = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -2 // preMbr: uint64

	// ./contracts/delegated_optin_app.algo.ts:30
	// sendAssetTransfer({
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// ./contracts/delegated_optin_app.algo.ts:31
	// assetReceiver: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field AssetReceiver

	// ./contracts/delegated_optin_app.algo.ts:32
	// xferAsset: asset
	frame_dig -1 // asset: asset
	itxn_field XferAsset

	// ./contracts/delegated_optin_app.algo.ts:33
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// ./contracts/delegated_optin_app.algo.ts:34
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit

	// ./contracts/delegated_optin_app.algo.ts:37
	// mbrDelta = preMbr - this.app.address.minBalance
	frame_dig -2 // preMbr: uint64
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	-
	frame_bury -3 // mbrDelta: uint64

	// ./contracts/delegated_optin_app.algo.ts:39
	// assert(mbrDelta !== this.assetMBR.get())
	frame_dig -3 // mbrDelta: uint64
	byte "assetMBR"
	app_global_get
	!=
	assert

	// ./contracts/delegated_optin_app.algo.ts:40
	// this.assetMBR.set(mbrDelta)
	byte "assetMBR"
	frame_dig -3 // mbrDelta: uint64
	app_global_put

	// ./contracts/delegated_optin_app.algo.ts:42
	// sendAssetTransfer({
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// ./contracts/delegated_optin_app.algo.ts:43
	// assetReceiver: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field AssetReceiver

	// ./contracts/delegated_optin_app.algo.ts:44
	// xferAsset: asset
	frame_dig -1 // asset: asset
	itxn_field XferAsset

	// ./contracts/delegated_optin_app.algo.ts:45
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// ./contracts/delegated_optin_app.algo.ts:46
	// fee: 0
	int 0
	itxn_field Fee

	// ./contracts/delegated_optin_app.algo.ts:47
	// assetCloseTo: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field AssetCloseTo
	itxn_submit
	retsub

abi_route_setSignature:
	byte 0x; dup
	txn GroupIndex
	int 1
	-
	txna ApplicationArgs 1
	callsub setSignature
	int 1
	return

setSignature:
	proto 4 0

	// Calculate the auth address for the sender
	// ./contracts/delegated_optin_app.algo.ts:60
	// authAddr = this.txn.sender.authAddr
	txn Sender
	acct_params_get AcctAuthAddr
	assert
	frame_bury -3 // authAddr: address

	// if0_condition
	// ./contracts/delegated_optin_app.algo.ts:61
	// authAddr === globals.zeroAddress
	frame_dig -3 // authAddr: address
	global ZeroAddress
	==
	bz if0_end

	// if0_consequent
	// ./contracts/delegated_optin_app.algo.ts:61
	// authAddr = this.txn.sender
	txn Sender
	frame_bury -3 // authAddr: address

if0_end:
	// Record MBR before box_put to later determine the MBR delta
	// ./contracts/delegated_optin_app.algo.ts:64
	// preMBR = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -4 // preMBR: uint64

	// ./contracts/delegated_optin_app.algo.ts:65
	// this.signatures.set(authAddr, sig)
	frame_dig -3 // authAddr: address
	frame_dig -1 // sig: byte[64]
	box_put

	// Verify box MBR payment
	// ./contracts/delegated_optin_app.algo.ts:68
	// assert(boxMBRPayment.receiver === this.app.address)
	frame_dig -2 // boxMBRPayment: pay
	gtxns Receiver
	txna Applications 0
	app_params_get AppAddress
	assert
	==
	assert

	// ./contracts/delegated_optin_app.algo.ts:69
	// assert(boxMBRPayment.amount >= this.app.address.minBalance - preMBR)
	frame_dig -2 // boxMBRPayment: pay
	gtxns Amount
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_dig -4 // preMBR: uint64
	-
	>=
	assert
	retsub

abi_route_delegatedOptIn:
	// no dupn needed
	txn GroupIndex
	int 1
	-
	txn GroupIndex
	int 2
	-
	callsub delegatedOptIn
	int 1
	return

delegatedOptIn:
	proto 2 0

	// Verify asset mbr payment
	// ./contracts/delegated_optin_app.algo.ts:81
	// assert(optIn.assetReceiver === mbrPayment.receiver)
	frame_dig -2 // optIn: axfer
	gtxns AssetReceiver
	frame_dig -1 // mbrPayment: pay
	gtxns Receiver
	==
	assert

	// ./contracts/delegated_optin_app.algo.ts:82
	// assert(mbrPayment.amount >= this.assetMBR.get())
	frame_dig -1 // mbrPayment: pay
	gtxns Amount
	byte "assetMBR"
	app_global_get
	>=
	assert

	// Verify that the signature is present
	// ./contracts/delegated_optin_app.algo.ts:85
	// assert(this.signatures.exists(optIn.sender))
	frame_dig -2 // optIn: axfer
	gtxns Sender
	box_len
	swap
	pop
	assert
	retsub

abi_route_unsetSignature:
	byte 0x; dup
	callsub unsetSignature
	int 1
	return

unsetSignature:
	proto 2 0

	// Calculate the auth address for the sender
	// ./contracts/delegated_optin_app.algo.ts:94
	// authAddr = this.txn.sender.authAddr
	txn Sender
	acct_params_get AcctAuthAddr
	assert
	frame_bury -1 // authAddr: address

	// if1_condition
	// ./contracts/delegated_optin_app.algo.ts:95
	// authAddr === globals.zeroAddress
	frame_dig -1 // authAddr: address
	global ZeroAddress
	==
	bz if1_end

	// if1_consequent
	// ./contracts/delegated_optin_app.algo.ts:95
	// authAddr = this.txn.sender
	txn Sender
	frame_bury -1 // authAddr: address

if1_end:
	// Record MBR before box_del to later determine the MBR delta
	// ./contracts/delegated_optin_app.algo.ts:98
	// preMBR = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -2 // preMBR: uint64

	// ./contracts/delegated_optin_app.algo.ts:99
	// this.signatures.delete(authAddr)
	frame_dig -1 // authAddr: address
	box_del

	// Return the box MBR
	// ./contracts/delegated_optin_app.algo.ts:102
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// ./contracts/delegated_optin_app.algo.ts:103
	// fee: 0
	int 0
	itxn_field Fee

	// ./contracts/delegated_optin_app.algo.ts:104
	// amount: preMBR - this.app.address.minBalance
	frame_dig -2 // preMBR: uint64
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	-
	itxn_field Amount

	// ./contracts/delegated_optin_app.algo.ts:105
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver
	itxn_submit
	retsub

create_NoOp:
	txn NumAppArgs
	switch abi_route_createApplication
	err

call_NoOp:
	method "updateAssetMBR(asset)void"
	method "setSignature(byte[64],pay)void"
	method "delegatedOptIn(pay,axfer)void"
	method "unsetSignature()void"
	txna ApplicationArgs 0
	match abi_route_updateAssetMBR abi_route_setSignature abi_route_delegatedOptIn abi_route_unsetSignature
	err