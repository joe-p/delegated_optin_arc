{
  "hints": {
    "updateAssetMBR(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSigVerificationAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSignature(byte[64],address,txn)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verify(pay,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setEndTime(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifySpecificAddress(pay,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setEndTimeForSpecificAddress(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSignatureForSpecificAddress(byte[64],address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "sigVerificationAddress": {
          "type": "bytes",
          "key": "sigVerificationAddress"
        },
        "assetMBR": {
          "type": "uint64",
          "key": "assetMBR"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu"
  },
  "contract": {
    "name": "Master",
    "desc": "",
    "methods": [
      {
        "name": "updateAssetMBR",
        "args": [
          {
            "name": "asset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setSigVerificationAddress",
        "args": [
          {
            "name": "lsig",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setSignature",
        "args": [
          {
            "name": "sig",
            "type": "byte[64]",
            "desc": ""
          },
          {
            "name": "signer",
            "type": "address",
            "desc": ""
          },
          {
            "name": "verifier",
            "type": "txn",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "verify",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "optIn",
            "type": "axfer",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setEndTime",
        "args": [
          {
            "name": "timestamp",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "verifySpecificAddress",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "optIn",
            "type": "axfer",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setEndTimeForSpecificAddress",
        "args": [
          {
            "name": "timestamp",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "allowedAddress",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setSignatureForSpecificAddress",
        "args": [
          {
            "name": "sig",
            "type": "byte[64]",
            "desc": ""
          },
          {
            "name": "signer",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}