{
  "hints": {
    "setSigVerificationAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateAssetMBR(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSignature(byte[64],address,txn)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verify(pay,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setEndTime(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSignatureForSpecificAddress(byte[64],address,address,txn)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifySpecificAddress(pay,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setEndTimeForSpecificAddress(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "sigVerificationAddress": {
          "type": "bytes",
          "key": "sigVerificationAddress"
        },
        "assetMBR": {
          "type": "uint64",
          "key": "assetMBR"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKCWIgbWFpbgoKZ2V0U2VuZGVyUmVjZWl2ZXJIYXNoOgoJcHJvdG8gMiAxCgoJLy8gLi9jb250cmFjdHMvbWFzdGVyLmFsZ28udHM6MzEKCS8vIHJldHVybiBzaGEyNTYoY29uY2F0KHNlbmRlciwgcmVjZWl2ZXJPclNpZ25lcikpOwoJZnJhbWVfZGlnIC0xIC8vIHNlbmRlcjogYWRkcmVzcwoJZnJhbWVfZGlnIC0yIC8vIHJlY2VpdmVyT3JTaWduZXI6IGFkZHJlc3MKCWNvbmNhdAoJc2hhMjU2CglyZXRzdWIKCmJhcmVfcm91dGVfY3JlYXRlOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCT09CgkmJgoJYXNzZXJ0CgoJLy8gbm8gZHVwbiBuZWVkZWQKCWNhbGxzdWIgY3JlYXRlCglpbnQgMQoJcmV0dXJuCgpjcmVhdGU6Cglwcm90byAwIDAKCgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czozNgoJLy8gdGhpcy5hc3NldE1CUi5wdXQoMTAwXzAwMCkKCWJ5dGUgImFzc2V0TUJSIgoJaW50IDEwMF8wMDAKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCmFiaV9yb3V0ZV9zZXRTaWdWZXJpZmljYXRpb25BZGRyZXNzOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CgoJLy8gbm8gZHVwbiBuZWVkZWQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWNhbGxzdWIgc2V0U2lnVmVyaWZpY2F0aW9uQWRkcmVzcwoJaW50IDEKCXJldHVybgoKc2V0U2lnVmVyaWZpY2F0aW9uQWRkcmVzczoKCXByb3RvIDEgMAoKCS8vIC4vY29udHJhY3RzL21hc3Rlci5hbGdvLnRzOjQ4CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFwcC5jcmVhdG9yKQoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJYXNzZXJ0Cgk9PQoJYXNzZXJ0CgoJLy8gLi9jb250cmFjdHMvbWFzdGVyLmFsZ28udHM6NDkKCS8vIGFzc2VydCghdGhpcy5zaWdWZXJpZmljYXRpb25BZGRyZXNzLmV4aXN0cygpKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAic2lnVmVyaWZpY2F0aW9uQWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglzd2FwCglwb3AKCSEKCWFzc2VydAoKCS8vIC4vY29udHJhY3RzL21hc3Rlci5hbGdvLnRzOjUwCgkvLyB0aGlzLnNpZ1ZlcmlmaWNhdGlvbkFkZHJlc3MucHV0KGxzaWcpCglieXRlICJzaWdWZXJpZmljYXRpb25BZGRyZXNzIgoJZnJhbWVfZGlnIC0xIC8vIGxzaWc6IGFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCmFiaV9yb3V0ZV91cGRhdGVBc3NldE1CUjoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweDsgZHVwCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBc3NldHMKCWNhbGxzdWIgdXBkYXRlQXNzZXRNQlIKCWludCAxCglyZXR1cm4KCnVwZGF0ZUFzc2V0TUJSOgoJcHJvdG8gMyAwCgoJLy8gLi9jb250cmFjdHMvbWFzdGVyLmFsZ28udHM6NjAKCS8vIHByZU1iciA9IHRoaXMuYXBwLmFkZHJlc3MubWluQmFsYW5jZQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJYXNzZXJ0CglhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKCWFzc2VydAoJZnJhbWVfYnVyeSAtMiAvLyBwcmVNYnI6IHVpbnQ2NAoKCS8vIC4vY29udHJhY3RzL21hc3Rlci5hbGdvLnRzOjYyCgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czo2MwoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJYXNzZXJ0CglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czo2NAoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBhc3NldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czo2NQoJLy8gYXNzZXRBbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gLi9jb250cmFjdHMvbWFzdGVyLmFsZ28udHM6NjYKCS8vIGZlZTogMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCglpdHhuX3N1Ym1pdAoKCS8vIC4vY29udHJhY3RzL21hc3Rlci5hbGdvLnRzOjY5CgkvLyBtYnJEZWx0YSA9IHByZU1iciAtIHRoaXMuYXBwLmFkZHJlc3MubWluQmFsYW5jZQoJZnJhbWVfZGlnIC0yIC8vIHByZU1icjogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglhc3NlcnQKCWFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQoJYXNzZXJ0CgktCglmcmFtZV9idXJ5IC0zIC8vIG1ickRlbHRhOiB1aW50NjQKCgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czo3MQoJLy8gYXNzZXJ0KG1ickRlbHRhICE9PSB0aGlzLmFzc2V0TUJSLmdldCgpKQoJZnJhbWVfZGlnIC0zIC8vIG1ickRlbHRhOiB1aW50NjQKCWJ5dGUgImFzc2V0TUJSIgoJYXBwX2dsb2JhbF9nZXQKCSE9Cglhc3NlcnQKCgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czo3MgoJLy8gdGhpcy5hc3NldE1CUi5wdXQobWJyRGVsdGEpCglieXRlICJhc3NldE1CUiIKCWZyYW1lX2RpZyAtMyAvLyBtYnJEZWx0YTogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIC4vY29udHJhY3RzL21hc3Rlci5hbGdvLnRzOjc0CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czo3NQoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJYXNzZXJ0CglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czo3NgoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBhc3NldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czo3NwoJLy8gYXNzZXRBbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gLi9jb250cmFjdHMvbWFzdGVyLmFsZ28udHM6NzgKCS8vIGZlZTogMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gLi9jb250cmFjdHMvbWFzdGVyLmFsZ28udHM6NzkKCS8vIGFzc2V0Q2xvc2VUbzogdGhpcy5hcHAuYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJYXNzZXJ0CglpdHhuX2ZpZWxkIEFzc2V0Q2xvc2VUbwoJaXR4bl9zdWJtaXQKCXJldHN1YgoKYWJpX3JvdXRlX3NldFNpZ25hdHVyZToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoKCS8vIG5vIGR1cG4gbmVlZGVkCgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWNhbGxzdWIgc2V0U2lnbmF0dXJlCglpbnQgMQoJcmV0dXJuCgpzZXRTaWduYXR1cmU6Cglwcm90byAzIDAKCgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czo5NAoJLy8gYXNzZXJ0KHZlcmlmaWVyLnNlbmRlciA9PT0gdGhpcy5zaWdWZXJpZmljYXRpb25BZGRyZXNzLmdldCgpKQoJZnJhbWVfZGlnIC0zIC8vIHZlcmlmaWVyOiB0eG4KCWd0eG5zIFNlbmRlcgoJYnl0ZSAic2lnVmVyaWZpY2F0aW9uQWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYXNzZXJ0CgoJLy8gLi9jb250cmFjdHMvbWFzdGVyLmFsZ28udHM6OTYKCS8vIHRoaXMuc2lncy5wdXQoc2lnbmVyLCBzaWcpCglieXRlICJzLSIKCWZyYW1lX2RpZyAtMiAvLyBzaWduZXI6IGFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfZGlnIC0xIC8vIHNpZzogYnl0ZVs2NF0KCWJveF9wdXQKCXJldHN1YgoKYWJpX3JvdXRlX3ZlcmlmeToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoKCS8vIG5vIGR1cG4gbmVlZGVkCgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCXR4biBHcm91cEluZGV4CglpbnQgMgoJLQoJY2FsbHN1YiB2ZXJpZnkKCWludCAxCglyZXR1cm4KCnZlcmlmeToKCXByb3RvIDIgMAoKCS8vIC4vY29udHJhY3RzL21hc3Rlci5hbGdvLnRzOjEwNwoJLy8gYXNzZXJ0KG9wdEluLmFzc2V0UmVjZWl2ZXIgPT09IG1iclBheW1lbnQucmVjZWl2ZXIpCglmcmFtZV9kaWcgLTIgLy8gb3B0SW46IGF4ZmVyCglndHhucyBBc3NldFJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5bWVudDogcGF5CglndHhucyBSZWNlaXZlcgoJPT0KCWFzc2VydAoKCS8vIC4vY29udHJhY3RzL21hc3Rlci5hbGdvLnRzOjEwOAoJLy8gYXNzZXJ0KG1iclBheW1lbnQuYW1vdW50ID49IHRoaXMuYXNzZXRNQlIuZ2V0KCkpCglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5bWVudDogcGF5CglndHhucyBBbW91bnQKCWJ5dGUgImFzc2V0TUJSIgoJYXBwX2dsb2JhbF9nZXQKCT49Cglhc3NlcnQKCgkvLyBpZjBfY29uZGl0aW9uCgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czoxMTEKCS8vIHRoaXMuZW5kVGltZXMuZXhpc3RzKG9wdEluLmFzc2V0UmVjZWl2ZXIpCglieXRlICJlLSIKCWZyYW1lX2RpZyAtMiAvLyBvcHRJbjogYXhmZXIKCWd0eG5zIEFzc2V0UmVjZWl2ZXIKCWNvbmNhdAoJYm94X2dldAoJc3dhcAoJcG9wCglieiBpZjBfZW5kCgoJLy8gaWYwX2NvbnNlcXVlbnQKCS8vIC4vY29udHJhY3RzL21hc3Rlci5hbGdvLnRzOjExMgoJLy8gYXNzZXJ0KHRoaXMuZW5kVGltZXMuZ2V0KG9wdEluLmFzc2V0UmVjZWl2ZXIpID4gZ2xvYmFscy5sYXRlc3RUaW1lc3RhbXApCglieXRlICJlLSIKCWZyYW1lX2RpZyAtMiAvLyBvcHRJbjogYXhmZXIKCWd0eG5zIEFzc2V0UmVjZWl2ZXIKCWNvbmNhdAoJYm94X2dldAoJYXNzZXJ0CglidG9pCglnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCgk+Cglhc3NlcnQKCmlmMF9lbmQ6CglyZXRzdWIKCmFiaV9yb3V0ZV9zZXRFbmRUaW1lOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CgoJLy8gbm8gZHVwbiBuZWVkZWQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCWNhbGxzdWIgc2V0RW5kVGltZQoJaW50IDEKCXJldHVybgoKc2V0RW5kVGltZToKCXByb3RvIDEgMAoKCS8vIC4vY29udHJhY3RzL21hc3Rlci5hbGdvLnRzOjEyMwoJLy8gdGhpcy5lbmRUaW1lcy5wdXQodGhpcy50eG4uc2VuZGVyLCB0aW1lc3RhbXApCglieXRlICJlLSIKCXR4biBTZW5kZXIKCWNvbmNhdAoJZnJhbWVfZGlnIC0xIC8vIHRpbWVzdGFtcDogdWludDY0CglpdG9iCglib3hfcHV0CglyZXRzdWIKCmFiaV9yb3V0ZV9zZXRTaWduYXR1cmVGb3JTcGVjaWZpY0FkZHJlc3M6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJY2FsbHN1YiBzZXRTaWduYXR1cmVGb3JTcGVjaWZpY0FkZHJlc3MKCWludCAxCglyZXR1cm4KCnNldFNpZ25hdHVyZUZvclNwZWNpZmljQWRkcmVzczoKCXByb3RvIDUgMAoKCS8vIC4vY29udHJhY3RzL21hc3Rlci5hbGdvLnRzOjE0MQoJLy8gYXNzZXJ0KHZlcmlmaWVyLnNlbmRlciA9PT0gdGhpcy5zaWdWZXJpZmljYXRpb25BZGRyZXNzLmdldCgpKQoJZnJhbWVfZGlnIC00IC8vIHZlcmlmaWVyOiB0eG4KCWd0eG5zIFNlbmRlcgoJYnl0ZSAic2lnVmVyaWZpY2F0aW9uQWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYXNzZXJ0CgoJLy8gLi9jb250cmFjdHMvbWFzdGVyLmFsZ28udHM6MTQzCgkvLyBoYXNoID0gdGhpcy5nZXRTZW5kZXJSZWNlaXZlckhhc2goYWxsb3dlZEFkZHJlc3MsIHNpZ25lcikKCS8vIG5vIGR1cG4gbmVlZGVkCglmcmFtZV9kaWcgLTIgLy8gc2lnbmVyOiBhZGRyZXNzCglmcmFtZV9kaWcgLTMgLy8gYWxsb3dlZEFkZHJlc3M6IGFkZHJlc3MKCWNhbGxzdWIgZ2V0U2VuZGVyUmVjZWl2ZXJIYXNoCglmcmFtZV9idXJ5IC01IC8vIGhhc2g6IGJ5dGVzCgoJLy8gLi9jb250cmFjdHMvbWFzdGVyLmFsZ28udHM6MTQ1CgkvLyB0aGlzLmFkZHJlc3NTcGVjaWZpY1NpZ3MucHV0KGhhc2gsIHNpZykKCWJ5dGUgInMtIgoJZnJhbWVfZGlnIC01IC8vIGhhc2g6IGJ5dGVzCgljb25jYXQKCWZyYW1lX2RpZyAtMSAvLyBzaWc6IGJ5dGVbNjRdCglib3hfcHV0CglyZXRzdWIKCmFiaV9yb3V0ZV92ZXJpZnlTcGVjaWZpY0FkZHJlc3M6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJdHhuIEdyb3VwSW5kZXgKCWludCAyCgktCgljYWxsc3ViIHZlcmlmeVNwZWNpZmljQWRkcmVzcwoJaW50IDEKCXJldHVybgoKdmVyaWZ5U3BlY2lmaWNBZGRyZXNzOgoJcHJvdG8gMyAwCgoJLy8gLi9jb250cmFjdHMvbWFzdGVyLmFsZ28udHM6MTU3CgkvLyBhc3NlcnQob3B0SW4uYXNzZXRSZWNlaXZlciA9PT0gbWJyUGF5bWVudC5yZWNlaXZlcikKCWZyYW1lX2RpZyAtMiAvLyBvcHRJbjogYXhmZXIKCWd0eG5zIEFzc2V0UmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBtYnJQYXltZW50OiBwYXkKCWd0eG5zIFJlY2VpdmVyCgk9PQoJYXNzZXJ0CgoJLy8gLi9jb250cmFjdHMvbWFzdGVyLmFsZ28udHM6MTU4CgkvLyBhc3NlcnQobWJyUGF5bWVudC5hbW91bnQgPj0gdGhpcy5hc3NldE1CUi5nZXQoKSkKCWZyYW1lX2RpZyAtMSAvLyBtYnJQYXltZW50OiBwYXkKCWd0eG5zIEFtb3VudAoJYnl0ZSAiYXNzZXRNQlIiCglhcHBfZ2xvYmFsX2dldAoJPj0KCWFzc2VydAoKCS8vIC4vY29udHJhY3RzL21hc3Rlci5hbGdvLnRzOjE2MAoJLy8gaGFzaCA9IHRoaXMuZ2V0U2VuZGVyUmVjZWl2ZXJIYXNoKHRoaXMudHhuLnNlbmRlciwgb3B0SW4uYXNzZXRSZWNlaXZlcikKCS8vIG5vIGR1cG4gbmVlZGVkCglmcmFtZV9kaWcgLTIgLy8gb3B0SW46IGF4ZmVyCglndHhucyBBc3NldFJlY2VpdmVyCgl0eG4gU2VuZGVyCgljYWxsc3ViIGdldFNlbmRlclJlY2VpdmVySGFzaAoJZnJhbWVfYnVyeSAtMyAvLyBoYXNoOiBieXRlcwoKCS8vIGlmMV9jb25kaXRpb24KCS8vIC4vY29udHJhY3RzL21hc3Rlci5hbGdvLnRzOjE2MwoJLy8gdGhpcy5hZGRyZXNzU3BlY2lmaWNFbmRUaW1lcy5leGlzdHMoaGFzaCkKCWJ5dGUgImUtIgoJZnJhbWVfZGlnIC0zIC8vIGhhc2g6IGJ5dGVzCgljb25jYXQKCWJveF9nZXQKCXN3YXAKCXBvcAoJYnogaWYxX2VuZAoKCS8vIGlmMV9jb25zZXF1ZW50CgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czoxNjQKCS8vIGFzc2VydCh0aGlzLmFkZHJlc3NTcGVjaWZpY0VuZFRpbWVzLmdldChoYXNoKSA+IGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wKQoJYnl0ZSAiZS0iCglmcmFtZV9kaWcgLTMgLy8gaGFzaDogYnl0ZXMKCWNvbmNhdAoJYm94X2dldAoJYXNzZXJ0CglidG9pCglnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCgk+Cglhc3NlcnQKCmlmMV9lbmQ6CglyZXRzdWIKCmFiaV9yb3V0ZV9zZXRFbmRUaW1lRm9yU3BlY2lmaWNBZGRyZXNzOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgljYWxsc3ViIHNldEVuZFRpbWVGb3JTcGVjaWZpY0FkZHJlc3MKCWludCAxCglyZXR1cm4KCnNldEVuZFRpbWVGb3JTcGVjaWZpY0FkZHJlc3M6Cglwcm90byAzIDAKCgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czoxNzYKCS8vIGhhc2ggPSB0aGlzLmdldFNlbmRlclJlY2VpdmVySGFzaChhbGxvd2VkQWRkcmVzcywgdGhpcy50eG4uc2VuZGVyKQoJLy8gbm8gZHVwbiBuZWVkZWQKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMiAvLyBhbGxvd2VkQWRkcmVzczogYWRkcmVzcwoJY2FsbHN1YiBnZXRTZW5kZXJSZWNlaXZlckhhc2gKCWZyYW1lX2J1cnkgLTMgLy8gaGFzaDogYnl0ZXMKCgkvLyAuL2NvbnRyYWN0cy9tYXN0ZXIuYWxnby50czoxNzgKCS8vIHRoaXMuYWRkcmVzc1NwZWNpZmljRW5kVGltZXMucHV0KGhhc2gsIHRpbWVzdGFtcCkKCWJ5dGUgImUtIgoJZnJhbWVfZGlnIC0zIC8vIGhhc2g6IGJ5dGVzCgljb25jYXQKCWZyYW1lX2RpZyAtMSAvLyB0aW1lc3RhbXA6IHVpbnQ2NAoJaXRvYgoJYm94X3B1dAoJcmV0c3ViCgptYWluOgoJdHhuIE51bUFwcEFyZ3MKCWJueiByb3V0ZV9hYmkKCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJPT0KCWJueiBiYXJlX3JvdXRlX2NyZWF0ZQoKcm91dGVfYWJpOgoJbWV0aG9kICJzZXRTaWdWZXJpZmljYXRpb25BZGRyZXNzKGFkZHJlc3Mpdm9pZCIKCW1ldGhvZCAidXBkYXRlQXNzZXRNQlIoYXNzZXQpdm9pZCIKCW1ldGhvZCAic2V0U2lnbmF0dXJlKGJ5dGVbNjRdLGFkZHJlc3MsdHhuKXZvaWQiCgltZXRob2QgInZlcmlmeShwYXksYXhmZXIpdm9pZCIKCW1ldGhvZCAic2V0RW5kVGltZSh1aW50NjQpdm9pZCIKCW1ldGhvZCAic2V0U2lnbmF0dXJlRm9yU3BlY2lmaWNBZGRyZXNzKGJ5dGVbNjRdLGFkZHJlc3MsYWRkcmVzcyx0eG4pdm9pZCIKCW1ldGhvZCAidmVyaWZ5U3BlY2lmaWNBZGRyZXNzKHBheSxheGZlcil2b2lkIgoJbWV0aG9kICJzZXRFbmRUaW1lRm9yU3BlY2lmaWNBZGRyZXNzKHVpbnQ2NCxhZGRyZXNzKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfc2V0U2lnVmVyaWZpY2F0aW9uQWRkcmVzcyBhYmlfcm91dGVfdXBkYXRlQXNzZXRNQlIgYWJpX3JvdXRlX3NldFNpZ25hdHVyZSBhYmlfcm91dGVfdmVyaWZ5IGFiaV9yb3V0ZV9zZXRFbmRUaW1lIGFiaV9yb3V0ZV9zZXRTaWduYXR1cmVGb3JTcGVjaWZpY0FkZHJlc3MgYWJpX3JvdXRlX3ZlcmlmeVNwZWNpZmljQWRkcmVzcyBhYmlfcm91dGVfc2V0RW5kVGltZUZvclNwZWNpZmljQWRkcmVzcwoJZXJy",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu"
  },
  "contract": {
    "name": "Master",
    "desc": "",
    "methods": [
      {
        "name": "setSigVerificationAddress",
        "args": [
          {
            "name": "lsig",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "updateAssetMBR",
        "args": [
          {
            "name": "asset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setSignature",
        "args": [
          {
            "name": "sig",
            "type": "byte[64]",
            "desc": ""
          },
          {
            "name": "signer",
            "type": "address",
            "desc": ""
          },
          {
            "name": "verifier",
            "type": "txn",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "verify",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "optIn",
            "type": "axfer",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setEndTime",
        "args": [
          {
            "name": "timestamp",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setSignatureForSpecificAddress",
        "args": [
          {
            "name": "sig",
            "type": "byte[64]",
            "desc": ""
          },
          {
            "name": "signer",
            "type": "address",
            "desc": ""
          },
          {
            "name": "allowedAddress",
            "type": "address",
            "desc": ""
          },
          {
            "name": "verifier",
            "type": "txn",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "verifySpecificAddress",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "optIn",
            "type": "axfer",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setEndTimeForSpecificAddress",
        "args": [
          {
            "name": "timestamp",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "allowedAddress",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}