#pragma version 8
	b main

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

verifyMBRPayment:
	proto 2 0

	// ./contracts/app.algo.ts:20
	// assert(payment.amount === this.app.address.minBalance - preMBR)
	frame_dig -1 // payment: pay
	gtxns Amount
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_dig -2 // preMBR: uint64
	-
	==
	assert

	// ./contracts/app.algo.ts:21
	// assert(payment.receiver === this.app.address)
	frame_dig -1 // payment: pay
	gtxns Receiver
	txna Applications 0
	app_params_get AppAddress
	assert
	==
	assert
	retsub

sendMBRPayment:
	proto 1 0

	// ./contracts/app.algo.ts:25
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// ./contracts/app.algo.ts:26
	// sender: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field Sender

	// ./contracts/app.algo.ts:27
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// ./contracts/app.algo.ts:28
	// amount: preMBR - this.app.address.minBalance
	frame_dig -1 // preMBR: uint64
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	-
	itxn_field Amount

	// ./contracts/app.algo.ts:29
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit
	retsub

abi_route_setVerifierAddress:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txna ApplicationArgs 1
	callsub setVerifierAddress
	int 1
	return

setVerifierAddress:
	proto 1 0

	// ./contracts/app.algo.ts:40
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// ./contracts/app.algo.ts:41
	// assert(!this.verifier.exists())
	txna Applications 0
	byte "verifier"
	app_global_get_ex
	swap
	pop
	!
	assert

	// ./contracts/app.algo.ts:42
	// this.verifier.put(lsig)
	byte "verifier"
	frame_dig -1 // lsig: address
	app_global_put
	retsub

abi_route_addToWhitelist:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 2
	txn GroupIndex
	int 1
	-
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub addToWhitelist
	int 1
	return

addToWhitelist:
	proto 6 0

	// ./contracts/app.algo.ts:54
	// preMBR = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -4 // preMBR: uint64

	// ./contracts/app.algo.ts:55
	// whitelist: Whitelist = { account: this.txn.sender, boxID: boxID }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	txn Sender
	callsub process_static_tuple_element
	frame_dig -1 // boxID: uint16
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -5 // whitelist: Whitelist

	// if0_condition
	// ./contracts/app.algo.ts:57
	// this.whitelist.exists(whitelist)
	frame_dig -5 // whitelist: Whitelist
	box_get
	swap
	pop
	bz if0_else

	// if0_consequent
	// ./contracts/app.algo.ts:58
	// this.whitelist.get(whitelist).push(addr)
	frame_dig -5 // whitelist: Whitelist
	box_get
	assert
	dup
	int 0
	extract_uint16
	int 1
	+
	itob
	extract 6 2
	swap
	extract 2 0
	concat
	frame_dig -2 // addr: address
	concat
	frame_dig -5 // whitelist: Whitelist
	dup
	box_del
	pop
	swap
	box_put
	b if0_end

if0_else:
	// ./contracts/app.algo.ts:60
	// newWhitelist: Address[] = [addr]
	frame_dig -2 // addr: address
	byte 0x0001
	swap
	concat
	frame_bury -6 // newWhitelist: address[]

	// ./contracts/app.algo.ts:61
	// this.whitelist.put(whitelist, newWhitelist)
	frame_dig -5 // whitelist: Whitelist
	dup
	box_del
	pop
	frame_dig -6 // newWhitelist: address[]
	box_put

if0_end:
	// ./contracts/app.algo.ts:64
	// this.verifyMBRPayment(payment, preMBR)
	frame_dig -4 // preMBR: uint64
	frame_dig -3 // payment: pay
	callsub verifyMBRPayment
	retsub

abi_route_setWhitelist:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dup
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub setWhitelist
	int 1
	return

setWhitelist:
	proto 4 0

	// ./contracts/app.algo.ts:76
	// preMBR = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -3 // preMBR: uint64

	// ./contracts/app.algo.ts:77
	// whitelist: Whitelist = { account: this.txn.sender, boxID: boxID }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	txn Sender
	callsub process_static_tuple_element
	frame_dig -1 // boxID: uint16
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -4 // whitelist: Whitelist

	// ./contracts/app.algo.ts:79
	// this.whitelist.delete(whitelist)
	frame_dig -4 // whitelist: Whitelist
	box_del

	// ./contracts/app.algo.ts:81
	// this.whitelist.put(whitelist, addrs)
	frame_dig -4 // whitelist: Whitelist
	dup
	box_del
	pop
	frame_dig -2 // addrs: address[]
	box_put

	// if1_condition
	// ./contracts/app.algo.ts:83
	// preMBR > this.app.address.minBalance
	frame_dig -3 // preMBR: uint64
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	>
	bz if1_else

	// if1_consequent
	// ./contracts/app.algo.ts:84
	// this.sendMBRPayment(preMBR)
	frame_dig -3 // preMBR: uint64
	callsub sendMBRPayment
	b if1_end

if1_else:
	// ./contracts/app.algo.ts:86
	// this.verifyMBRPayment(this.txnGroup[this.txn.groupIndex - 1], preMBR)
	frame_dig -3 // preMBR: uint64
	txn GroupIndex
	int 1
	-
	callsub verifyMBRPayment

if1_end:
	retsub

abi_route_deleteWhitelist:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dup
	txna ApplicationArgs 1
	callsub deleteWhitelist
	int 1
	return

deleteWhitelist:
	proto 3 0

	// ./contracts/app.algo.ts:97
	// preMBR = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -2 // preMBR: uint64

	// ./contracts/app.algo.ts:98
	// whitelist: Whitelist = { account: this.txn.sender, boxID: boxID }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	txn Sender
	callsub process_static_tuple_element
	frame_dig -1 // boxID: uint16
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -3 // whitelist: Whitelist

	// ./contracts/app.algo.ts:100
	// this.whitelist.delete(whitelist)
	frame_dig -3 // whitelist: Whitelist
	box_del

	// ./contracts/app.algo.ts:102
	// this.sendMBRPayment(preMBR)
	frame_dig -2 // preMBR: uint64
	callsub sendMBRPayment
	retsub

abi_route_deleteFromWhitelist:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 2
	txna ApplicationArgs 3
	btoi
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub deleteFromWhitelist
	int 1
	return

deleteFromWhitelist:
	proto 6 0

	// ./contracts/app.algo.ts:114
	// preMBR = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -4 // preMBR: uint64

	// ./contracts/app.algo.ts:115
	// whitelist: Whitelist = { account: this.txn.sender, boxID: boxID }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	txn Sender
	callsub process_static_tuple_element
	frame_dig -1 // boxID: uint16
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -5 // whitelist: Whitelist

	// ./contracts/app.algo.ts:117
	// spliced = this.whitelist.get(whitelist).splice(index, 1)
	frame_dig -5 // whitelist: Whitelist
	box_get
	assert
	int 0
	extract_uint16
	int 1
	-
	itob
	extract 6 2
	frame_dig -3 // index: uint64
	int 32
	*
	int 2
	+
	store 12 // splice start
	int 1
	int 32
	*
	int 32
	+
	store 13 // splice byte length
	frame_dig -5 // whitelist: Whitelist
	box_get
	assert
	int 2
	load 12 // splice start
	substring3
	frame_dig -5 // whitelist: Whitelist
	box_get
	assert
	dup
	len
	load 12 // splice start
	load 13 // splice byte length
	+
	int 32
	-
	swap
	substring3
	concat
	concat
	int 1
	itob
	extract 6 2
	frame_dig -5 // whitelist: Whitelist
	box_get
	assert
	load 12 // splice start
	load 13 // splice byte length
	int 32
	-
	extract3
	concat
	swap
	frame_dig -5 // whitelist: Whitelist
	dup
	box_del
	pop
	swap
	box_put
	frame_bury -6 // spliced: address[]

	// ./contracts/app.algo.ts:119
	// assert(spliced[0] === addr)
	frame_dig -6 // spliced: address[]
	int 0
	int 32 // element length
	* // element offset
	int 2
	+ // add two for length
	int 32
	extract3
	frame_dig -2 // addr: address
	==
	assert

	// ./contracts/app.algo.ts:121
	// this.sendMBRPayment(preMBR)
	frame_dig -4 // preMBR: uint64
	callsub sendMBRPayment
	retsub

abi_route_verifySender:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 2
	txn GroupIndex
	int 1
	-
	txna ApplicationArgs 2
	btoi
	txna ApplicationArgs 1
	callsub verifySender
	int 1
	return

verifySender:
	proto 6 0

	// if2_condition
	// ./contracts/app.algo.ts:136
	// !this.status.exists(optIn.assetReceiver)
	frame_dig -3 // optIn: axfer
	gtxns AssetReceiver
	box_get
	swap
	pop
	!
	bz if2_end

	// if2_consequent
	// ./contracts/app.algo.ts:136
	// return;
	retsub

if2_end:
	// ./contracts/app.algo.ts:138
	// status = this.status.get(optIn.assetReceiver)
	frame_dig -3 // optIn: axfer
	gtxns AssetReceiver
	box_get
	assert
	frame_bury -4 // status: uint8

	// ./contracts/app.algo.ts:139
	// assert(status !== ALLOW_NONE)
	frame_dig -4 // status: uint8
	int 2
	itob
	extract 7 0
	b!=
	assert

	// if3_condition
	// ./contracts/app.algo.ts:140
	// status === ALLOW_ALL
	frame_dig -4 // status: uint8
	int 0
	itob
	extract 7 0
	b==
	bz if3_end

	// if3_consequent
	// ./contracts/app.algo.ts:140
	// return;
	retsub

if3_end:
	// ./contracts/app.algo.ts:142
	// whitelist: Whitelist = { account: optIn.assetReceiver, boxID: boxID }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	frame_dig -3 // optIn: axfer
	gtxns AssetReceiver
	callsub process_static_tuple_element
	frame_dig -1 // boxID: uint16
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -5 // whitelist: Whitelist

	// ./contracts/app.algo.ts:144
	// whitelistAddr = this.whitelist.get(whitelist)[index]
	frame_dig -5 // whitelist: Whitelist
	box_get
	assert
	frame_dig -2 // index: uint64
	int 32 // element length
	* // element offset
	int 2
	+ // add two for length
	int 32
	extract3
	frame_bury -6 // whitelistAddr: address

	// ./contracts/app.algo.ts:145
	// assert(whitelistAddr === this.txn.sender)
	frame_dig -6 // whitelistAddr: address
	txn Sender
	==
	assert
	retsub

abi_route_setWhitelistStatus:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txna ApplicationArgs 1
	callsub setWhitelistStatus
	int 1
	return

setWhitelistStatus:
	proto 1 0

	// ./contracts/app.algo.ts:156
	// assert(status <= ALLOW_NONE)
	frame_dig -1 // status: uint8
	int 2
	itob
	extract 7 0
	b<=
	assert

	// ./contracts/app.algo.ts:157
	// this.status.put(this.txn.sender, status)
	txn Sender
	frame_dig -1 // status: uint8
	box_put
	retsub

abi_route_setSignature:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	txn GroupIndex
	int 1
	-
	txna ApplicationArgs 3
	btoi
	txnas Accounts
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub setSignature
	int 1
	return

setSignature:
	proto 5 0

	// ./contracts/app.algo.ts:170
	// trueAuthAddr = (acct.authAddr === globals.zeroAddress) ? acct : acct.authAddr
	frame_dig -3 // acct: account
	acct_params_get AcctAuthAddr
	assert
	global ZeroAddress
	==
	bz ternary0_false
	frame_dig -3 // acct: account
	b ternary0_end

ternary0_false:
	frame_dig -3 // acct: account
	acct_params_get AcctAuthAddr
	assert

ternary0_end:
	frame_bury -5 // trueAuthAddr: address

	// ./contracts/app.algo.ts:172
	// assert(authAddr === trueAuthAddr)
	frame_dig -2 // authAddr: address
	frame_dig -5 // trueAuthAddr: address
	==
	assert

	// ./contracts/app.algo.ts:173
	// assert(verifier.sender === this.verifier.get())
	frame_dig -4 // verifier: txn
	gtxns Sender
	byte "verifier"
	app_global_get
	==
	assert

	// if4_condition
	// ./contracts/app.algo.ts:176
	// this.sigs.exists(acct)
	frame_dig -3 // acct: account
	box_get
	swap
	pop
	bz if4_end

	// if4_consequent
	// ./contracts/app.algo.ts:176
	// assert(this.sigs.get(acct) !== sig)
	frame_dig -3 // acct: account
	box_get
	assert
	frame_dig -1 // sig: byte[64]
	!=
	assert

if4_end:
	// ./contracts/app.algo.ts:178
	// this.sigs.put(acct, sig)
	frame_dig -3 // acct: account
	frame_dig -1 // sig: byte[64]
	box_put
	retsub

main:
	txn NumAppArgs
	bnz route_abi

	// default createApplication
	txn ApplicationID
	int 0
	==
	txn OnCompletion
	int NoOp
	==
	&&
	return

route_abi:
	method "setVerifierAddress(address)void"
	method "addToWhitelist(uint16,address,pay)void"
	method "setWhitelist(uint16,address[])void"
	method "deleteWhitelist(uint16)void"
	method "deleteFromWhitelist(uint16,address,uint64)void"
	method "verifySender(uint16,uint64,axfer)void"
	method "setWhitelistStatus(uint8)void"
	method "setSignature(byte[64],address,account,txn)void"
	txna ApplicationArgs 0
	match abi_route_setVerifierAddress abi_route_addToWhitelist abi_route_setWhitelist abi_route_deleteWhitelist abi_route_deleteFromWhitelist abi_route_verifySender abi_route_setWhitelistStatus abi_route_setSignature