#pragma version 8
	b main

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

verifyMBRPayment:
	proto 2 0

	// ./contracts/app.algo.ts:93
	// assert(payment.amount === this.app.address.minBalance - preMBR)
	frame_dig -1 // payment: pay
	gtxns Amount
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_dig -2 // preMBR: uint64
	-
	==
	assert

	// ./contracts/app.algo.ts:94
	// assert(payment.receiver === this.app.address)
	frame_dig -1 // payment: pay
	gtxns Receiver
	txna Applications 0
	app_params_get AppAddress
	assert
	==
	assert
	retsub

sendMBRPayment:
	proto 1 0

	// ./contracts/app.algo.ts:98
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// ./contracts/app.algo.ts:99
	// sender: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field Sender

	// ./contracts/app.algo.ts:100
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// ./contracts/app.algo.ts:101
	// amount: preMBR - this.app.address.minBalance
	frame_dig -1 // preMBR: uint64
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	-
	itxn_field Amount

	// ./contracts/app.algo.ts:102
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit
	retsub

abi_route_addToAllowlist:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 2
	txn GroupIndex
	int 1
	-
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub addToAllowlist
	int 1
	return

addToAllowlist:
	proto 6 0

	// ./contracts/app.algo.ts:115
	// preMBR = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -4 // preMBR: uint64

	// ./contracts/app.algo.ts:116
	// allowlist: Allowlist = { account: this.txn.sender, boxID: boxID }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	txn Sender
	callsub process_static_tuple_element
	frame_dig -1 // boxID: uint16
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -5 // allowlist: Allowlist

	// if0_condition
	// ./contracts/app.algo.ts:118
	// this.allowlist.exists(allowlist)
	frame_dig -5 // allowlist: Allowlist
	box_get
	swap
	pop
	bz if0_else

	// if0_consequent
	// ./contracts/app.algo.ts:119
	// this.allowlist.get(allowlist).push(addr)
	frame_dig -5 // allowlist: Allowlist
	box_get
	assert
	dup
	int 0
	extract_uint16
	int 1
	+
	itob
	extract 6 2
	swap
	extract 2 0
	concat
	frame_dig -2 // addr: address
	concat
	frame_dig -5 // allowlist: Allowlist
	dup
	box_del
	pop
	swap
	box_put
	b if0_end

if0_else:
	// ./contracts/app.algo.ts:121
	// newAllowlist: Address[] = [addr]
	frame_dig -2 // addr: address
	byte 0x0001
	swap
	concat
	frame_bury -6 // newAllowlist: address[]

	// ./contracts/app.algo.ts:122
	// this.allowlist.put(allowlist, newAllowlist)
	frame_dig -5 // allowlist: Allowlist
	dup
	box_del
	pop
	frame_dig -6 // newAllowlist: address[]
	box_put

if0_end:
	// ./contracts/app.algo.ts:125
	// this.verifyMBRPayment(payment, preMBR)
	frame_dig -4 // preMBR: uint64
	frame_dig -3 // payment: pay
	callsub verifyMBRPayment
	retsub

abi_route_setAllowlist:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dup
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub setAllowlist
	int 1
	return

setAllowlist:
	proto 4 0

	// ./contracts/app.algo.ts:137
	// preMBR = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -3 // preMBR: uint64

	// ./contracts/app.algo.ts:138
	// allowlist: Allowlist = { account: this.txn.sender, boxID: boxID }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	txn Sender
	callsub process_static_tuple_element
	frame_dig -1 // boxID: uint16
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -4 // allowlist: Allowlist

	// ./contracts/app.algo.ts:140
	// this.allowlist.delete(allowlist)
	frame_dig -4 // allowlist: Allowlist
	box_del

	// ./contracts/app.algo.ts:142
	// this.allowlist.put(allowlist, addrs)
	frame_dig -4 // allowlist: Allowlist
	dup
	box_del
	pop
	frame_dig -2 // addrs: address[]
	box_put

	// if1_condition
	// ./contracts/app.algo.ts:144
	// preMBR > this.app.address.minBalance
	frame_dig -3 // preMBR: uint64
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	>
	bz if1_else

	// if1_consequent
	// ./contracts/app.algo.ts:145
	// this.sendMBRPayment(preMBR)
	frame_dig -3 // preMBR: uint64
	callsub sendMBRPayment
	b if1_end

if1_else:
	// ./contracts/app.algo.ts:147
	// this.verifyMBRPayment(this.txnGroup[this.txn.groupIndex - 1], preMBR)
	frame_dig -3 // preMBR: uint64
	txn GroupIndex
	int 1
	-
	callsub verifyMBRPayment

if1_end:
	retsub

abi_route_deleteAllowlist:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dup
	txna ApplicationArgs 1
	callsub deleteAllowlist
	int 1
	return

deleteAllowlist:
	proto 3 0

	// ./contracts/app.algo.ts:158
	// preMBR = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -2 // preMBR: uint64

	// ./contracts/app.algo.ts:159
	// allowlist: Allowlist = { account: this.txn.sender, boxID: boxID }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	txn Sender
	callsub process_static_tuple_element
	frame_dig -1 // boxID: uint16
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -3 // allowlist: Allowlist

	// ./contracts/app.algo.ts:161
	// this.allowlist.delete(allowlist)
	frame_dig -3 // allowlist: Allowlist
	box_del

	// ./contracts/app.algo.ts:163
	// this.sendMBRPayment(preMBR)
	frame_dig -2 // preMBR: uint64
	callsub sendMBRPayment
	retsub

abi_route_deleteFromAllowlist:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 2
	txna ApplicationArgs 3
	btoi
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub deleteFromAllowlist
	int 1
	return

deleteFromAllowlist:
	proto 6 0

	// ./contracts/app.algo.ts:175
	// preMBR = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -4 // preMBR: uint64

	// ./contracts/app.algo.ts:176
	// allowlist: Allowlist = { account: this.txn.sender, boxID: boxID }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	txn Sender
	callsub process_static_tuple_element
	frame_dig -1 // boxID: uint16
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -5 // allowlist: Allowlist

	// ./contracts/app.algo.ts:178
	// spliced = this.allowlist.get(allowlist).splice(index, 1)
	frame_dig -5 // allowlist: Allowlist
	box_get
	assert
	int 0
	extract_uint16
	int 1
	-
	itob
	extract 6 2
	frame_dig -3 // index: uint64
	int 32
	*
	int 2
	+
	store 12 // splice start
	int 1
	int 32
	*
	int 32
	+
	store 13 // splice byte length
	frame_dig -5 // allowlist: Allowlist
	box_get
	assert
	int 2
	load 12 // splice start
	substring3
	frame_dig -5 // allowlist: Allowlist
	box_get
	assert
	dup
	len
	load 12 // splice start
	load 13 // splice byte length
	+
	int 32
	-
	swap
	substring3
	concat
	concat
	int 1
	itob
	extract 6 2
	frame_dig -5 // allowlist: Allowlist
	box_get
	assert
	load 12 // splice start
	load 13 // splice byte length
	int 32
	-
	extract3
	concat
	swap
	frame_dig -5 // allowlist: Allowlist
	dup
	box_del
	pop
	swap
	box_put
	frame_bury -6 // spliced: address[]

	// ./contracts/app.algo.ts:180
	// assert(spliced[0] === addr)
	frame_dig -6 // spliced: address[]
	int 0
	int 32 // element length
	* // element offset
	int 2
	+ // add two for length
	int 32
	extract3
	frame_dig -2 // addr: address
	==
	assert

	// ./contracts/app.algo.ts:182
	// this.sendMBRPayment(preMBR)
	frame_dig -4 // preMBR: uint64
	callsub sendMBRPayment
	retsub

abi_route_verifySender:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 3
	txna ApplicationArgs 2
	btoi
	txna ApplicationArgs 1
	callsub verifySender
	int 1
	return

verifySender:
	proto 6 0

	// ./contracts/app.algo.ts:196
	// optIn = this.txnGroup[this.txn.groupIndex - 1]
	txn GroupIndex
	int 1
	-
	frame_bury -3 // optIn: txn

	// if2_condition
	// ./contracts/app.algo.ts:197
	// !this.status.exists(optIn.assetReceiver)
	byte "status"
	frame_dig -3 // optIn: txn
	gtxns AssetReceiver
	concat
	box_get
	swap
	pop
	!
	bz if2_end

	// if2_consequent
	// ./contracts/app.algo.ts:197
	// return;
	retsub

if2_end:
	// ./contracts/app.algo.ts:199
	// status = this.status.get(optIn.assetReceiver)
	byte "status"
	frame_dig -3 // optIn: txn
	gtxns AssetReceiver
	concat
	box_get
	assert
	frame_bury -4 // status: uint8

	// ./contracts/app.algo.ts:200
	// assert(status !== ALLOW_NONE)
	frame_dig -4 // status: uint8
	int 2
	itob
	extract 7 0
	b!=
	assert

	// if3_condition
	// ./contracts/app.algo.ts:201
	// status === ALLOW_ALL
	frame_dig -4 // status: uint8
	int 0
	itob
	extract 7 0
	b==
	bz if3_end

	// if3_consequent
	// ./contracts/app.algo.ts:201
	// return;
	retsub

if3_end:
	// ./contracts/app.algo.ts:203
	// allowlist: Allowlist = { account: optIn.assetReceiver, boxID: boxID }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	frame_dig -3 // optIn: txn
	gtxns AssetReceiver
	callsub process_static_tuple_element
	frame_dig -1 // boxID: uint16
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -5 // allowlist: Allowlist

	// ./contracts/app.algo.ts:205
	// allowlistAddr = this.allowlist.get(allowlist)[index]
	frame_dig -5 // allowlist: Allowlist
	box_get
	assert
	frame_dig -2 // index: uint64
	int 32 // element length
	* // element offset
	int 2
	+ // add two for length
	int 32
	extract3
	frame_bury -6 // allowlistAddr: address

	// ./contracts/app.algo.ts:206
	// assert(allowlistAddr === this.txn.sender)
	frame_dig -6 // allowlistAddr: address
	txn Sender
	==
	assert
	retsub

abi_route_setAllowlistStatus:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txna ApplicationArgs 1
	callsub setAllowlistStatus
	int 1
	return

setAllowlistStatus:
	proto 1 0

	// ./contracts/app.algo.ts:217
	// assert(status <= ALLOW_NONE)
	frame_dig -1 // status: uint8
	int 2
	itob
	extract 7 0
	b<=
	assert

	// ./contracts/app.algo.ts:218
	// this.status.put(this.txn.sender, status)
	byte "status"
	txn Sender
	concat
	frame_dig -1 // status: uint8
	box_put
	retsub

main:
	txn NumAppArgs
	bnz route_abi

	// default createApplication
	txn ApplicationID
	int 0
	==
	txn OnCompletion
	int NoOp
	==
	&&
	return

route_abi:
	method "addToAllowlist(uint16,address,pay)void"
	method "setAllowlist(uint16,address[])void"
	method "deleteAllowlist(uint16)void"
	method "deleteFromAllowlist(uint16,address,uint64)void"
	method "verifySender(uint16,uint64)void"
	method "setAllowlistStatus(uint8)void"
	txna ApplicationArgs 0
	match abi_route_addToAllowlist abi_route_setAllowlist abi_route_deleteAllowlist abi_route_deleteFromAllowlist abi_route_verifySender abi_route_setAllowlistStatus