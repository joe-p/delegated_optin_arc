#pragma version 8
	b main

bare_route_create:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	==
	&&
	assert
	callsub create
	int 1
	return

create:
	proto 0 0

	// ./contracts/master.algo.ts:15
	// this.assetMBR.put(100_000)
	byte "assetMBR"
	int 100_000
	app_global_put
	retsub

abi_route_updateAssetMBR:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dup
	txna ApplicationArgs 1
	btoi
	txnas Assets
	callsub updateAssetMBR
	int 1
	return

updateAssetMBR:
	proto 3 0

	// ./contracts/master.algo.ts:23
	// preMbr = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -2 // preMbr: uint64

	// ./contracts/master.algo.ts:25
	// sendAssetTransfer({
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// ./contracts/master.algo.ts:26
	// assetReceiver: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field AssetReceiver

	// ./contracts/master.algo.ts:27
	// xferAsset: asset
	frame_dig -1 // asset: asset
	itxn_field XferAsset

	// ./contracts/master.algo.ts:28
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// ./contracts/master.algo.ts:29
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit

	// ./contracts/master.algo.ts:32
	// mbrDelta = preMbr - this.app.address.minBalance
	frame_dig -2 // preMbr: uint64
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	-
	frame_bury -3 // mbrDelta: uint64

	// ./contracts/master.algo.ts:34
	// assert(mbrDelta !== this.assetMBR.get())
	frame_dig -3 // mbrDelta: uint64
	byte "assetMBR"
	app_global_get
	!=
	assert

	// ./contracts/master.algo.ts:35
	// this.assetMBR.put(mbrDelta)
	byte "assetMBR"
	frame_dig -3 // mbrDelta: uint64
	app_global_put

	// ./contracts/master.algo.ts:37
	// sendAssetTransfer({
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// ./contracts/master.algo.ts:38
	// assetReceiver: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field AssetReceiver

	// ./contracts/master.algo.ts:39
	// xferAsset: asset
	frame_dig -1 // asset: asset
	itxn_field XferAsset

	// ./contracts/master.algo.ts:40
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// ./contracts/master.algo.ts:41
	// fee: 0
	int 0
	itxn_field Fee

	// ./contracts/master.algo.ts:42
	// assetCloseTo: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field AssetCloseTo
	itxn_submit
	retsub

abi_route_setSigVerificationAddress:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txna ApplicationArgs 1
	callsub setSigVerificationAddress
	int 1
	return

setSigVerificationAddress:
	proto 1 0

	// ./contracts/master.algo.ts:53
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// ./contracts/master.algo.ts:54
	// assert(!this.sigVerificationAddress.exists())
	txna Applications 0
	byte "sigVerificationAddress"
	app_global_get_ex
	swap
	pop
	!
	assert

	// ./contracts/master.algo.ts:55
	// this.sigVerificationAddress.put(lsig)
	byte "sigVerificationAddress"
	frame_dig -1 // lsig: address
	app_global_put
	retsub

abi_route_setSignature:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	txn GroupIndex
	int 1
	-
	txna ApplicationArgs 3
	btoi
	txnas Accounts
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub setSignature
	int 1
	return

setSignature:
	proto 5 0

	// ./contracts/master.algo.ts:68
	// trueAuthAddr = (acct.authAddr === globals.zeroAddress) ? acct : acct.authAddr
	frame_dig -3 // acct: account
	acct_params_get AcctAuthAddr
	assert
	global ZeroAddress
	==
	bz ternary0_false
	frame_dig -3 // acct: account
	b ternary0_end

ternary0_false:
	frame_dig -3 // acct: account
	acct_params_get AcctAuthAddr
	assert

ternary0_end:
	frame_bury -5 // trueAuthAddr: address

	// ./contracts/master.algo.ts:70
	// assert(authAddr === trueAuthAddr)
	frame_dig -2 // authAddr: address
	frame_dig -5 // trueAuthAddr: address
	==
	assert

	// ./contracts/master.algo.ts:71
	// assert(verifier.sender === this.sigVerificationAddress.get())
	frame_dig -4 // verifier: txn
	gtxns Sender
	byte "sigVerificationAddress"
	app_global_get
	==
	assert

	// if0_condition
	// ./contracts/master.algo.ts:74
	// this.sigs.exists(acct)
	byte "s-"
	frame_dig -3 // acct: account
	concat
	box_get
	swap
	pop
	bz if0_end

	// if0_consequent
	// ./contracts/master.algo.ts:74
	// assert(this.sigs.get(acct) !== sig)
	byte "s-"
	frame_dig -3 // acct: account
	concat
	box_get
	assert
	frame_dig -1 // sig: byte[64]
	!=
	assert

if0_end:
	// ./contracts/master.algo.ts:76
	// this.sigs.put(acct, sig)
	byte "s-"
	frame_dig -3 // acct: account
	concat
	frame_dig -1 // sig: byte[64]
	box_put
	retsub

abi_route_verify:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txn GroupIndex
	int 1
	-
	txn GroupIndex
	int 2
	-
	callsub verify
	int 1
	return

verify:
	proto 2 0

	// ./contracts/master.algo.ts:90
	// assert(optIn.assetReceiver === mbrPayment.receiver)
	frame_dig -2 // optIn: axfer
	gtxns AssetReceiver
	frame_dig -1 // mbrPayment: pay
	gtxns Receiver
	==
	assert

	// ./contracts/master.algo.ts:91
	// assert(mbrPayment.sender !== mbrPayment.receiver)
	frame_dig -1 // mbrPayment: pay
	gtxns Sender
	frame_dig -1 // mbrPayment: pay
	gtxns Receiver
	!=
	assert

	// ./contracts/master.algo.ts:92
	// assert(mbrPayment.amount === this.assetMBR.get())
	frame_dig -1 // mbrPayment: pay
	gtxns Amount
	byte "assetMBR"
	app_global_get
	==
	assert

	// if1_condition
	// ./contracts/master.algo.ts:95
	// this.endTimes.exists(optIn.assetReceiver)
	byte "e-"
	frame_dig -2 // optIn: axfer
	gtxns AssetReceiver
	concat
	box_get
	swap
	pop
	bz if1_end

	// if1_consequent
	// ./contracts/master.algo.ts:96
	// assert(this.endTimes.get(optIn.assetReceiver) > globals.latestTimestamp)
	byte "e-"
	frame_dig -2 // optIn: axfer
	gtxns AssetReceiver
	concat
	box_get
	assert
	btoi
	global LatestTimestamp
	>
	assert

if1_end:
	retsub

abi_route_setEndTime:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txna ApplicationArgs 1
	btoi
	callsub setEndTime
	int 1
	return

setEndTime:
	proto 1 0

	// ./contracts/master.algo.ts:107
	// this.endTimes.put(this.txn.sender, timestamp)
	byte "e-"
	txn Sender
	concat
	frame_dig -1 // timestamp: uint64
	itob
	box_put
	retsub

main:
	txn NumAppArgs
	bnz route_abi
	txn ApplicationID
	int 0
	==
	bnz bare_route_create

route_abi:
	method "updateAssetMBR(asset)void"
	method "setSigVerificationAddress(address)void"
	method "setSignature(byte[64],address,account,txn)void"
	method "verify(pay,axfer)void"
	method "setEndTime(uint64)void"
	txna ApplicationArgs 0
	match abi_route_updateAssetMBR abi_route_setSigVerificationAddress abi_route_setSignature abi_route_verify abi_route_setEndTime