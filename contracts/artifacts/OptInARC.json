{
  "hints": {
    "setVerifierAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addToWhitelist(uint16,address,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setWhitelist(uint16,address[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteWhitelist(uint16)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteFromWhitelist(uint16,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifySender(uint16,uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setWhitelistStatus(uint8)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSignature(byte[64],address,account,txn)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "verifier": {
          "type": "bytes",
          "key": "verifier"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu"
  },
  "contract": {
    "name": "OptInARC",
    "desc": "",
    "methods": [
      {
        "name": "setVerifierAddress",
        "args": [
          {
            "name": "lsig",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "addToWhitelist",
        "args": [
          {
            "name": "boxID",
            "type": "uint16",
            "desc": ""
          },
          {
            "name": "addr",
            "type": "address",
            "desc": ""
          },
          {
            "name": "payment",
            "type": "pay",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setWhitelist",
        "args": [
          {
            "name": "boxID",
            "type": "uint16",
            "desc": ""
          },
          {
            "name": "addrs",
            "type": "address[]",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "deleteWhitelist",
        "args": [
          {
            "name": "boxID",
            "type": "uint16",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "deleteFromWhitelist",
        "args": [
          {
            "name": "boxID",
            "type": "uint16",
            "desc": ""
          },
          {
            "name": "addr",
            "type": "address",
            "desc": ""
          },
          {
            "name": "index",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "verifySender",
        "args": [
          {
            "name": "boxID",
            "type": "uint16",
            "desc": ""
          },
          {
            "name": "index",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "optIn",
            "type": "axfer",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setWhitelistStatus",
        "args": [
          {
            "name": "status",
            "type": "uint8",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setSignature",
        "args": [
          {
            "name": "sig",
            "type": "byte[64]",
            "desc": ""
          },
          {
            "name": "authAddr",
            "type": "address",
            "desc": ""
          },
          {
            "name": "acct",
            "type": "account",
            "desc": ""
          },
          {
            "name": "verifier",
            "type": "txn",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}