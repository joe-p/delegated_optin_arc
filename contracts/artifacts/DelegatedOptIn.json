{
  "hints": {
    "updateAssetMBR(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSignature(byte[64],pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delegatedOptIn(pay,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unsetSignature()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "assetMBR": {
          "type": "uint64",
          "key": "assetMBR"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDkKaW50IDE="
  },
  "contract": {
    "name": "DelegatedOptIn",
    "desc": "",
    "methods": [
      {
        "name": "updateAssetMBR",
        "args": [
          {
            "name": "asset",
            "type": "asset",
            "desc": "The asset to opt into and opt out of to determine MBR"
          }
        ],
        "desc": "Updates the asset MBR",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setSignature",
        "args": [
          {
            "name": "sig",
            "type": "byte[64]",
            "desc": "The signature of the lsig"
          },
          {
            "name": "boxMBRPayment",
            "type": "pay",
            "desc": "Payment to cover the contract MBR for box creation"
          }
        ],
        "desc": "Set the signature of the lsig for the given account",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "delegatedOptIn",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "Payment to the receiver that covers the ASA MBR"
          },
          {
            "name": "optIn",
            "type": "axfer",
            "desc": "The opt in transaction, presumably from the open opt-in lsig"
          }
        ],
        "desc": "Verifies that the opt in is allowed",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "unsetSignature",
        "args": [],
        "desc": "Delete the signature from box storage.This will disable delegated opt-ins and return the box MBR balance",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}