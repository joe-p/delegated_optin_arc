{
  "hints": {
    "setSigVerificationAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateAssetMBR(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setOpenOptInSignature(byte[64],address,txn)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "openOptIn(pay,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setOpenOptInEndTime(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAddressOptInSignature(byte[64],address,address,txn)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addressOptIn(pay,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAddressOptInEndTime(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "sigVerificationAddress": {
          "type": "bytes",
          "key": "sigVerificationAddress"
        },
        "assetMBR": {
          "type": "uint64",
          "key": "assetMBR"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu"
  },
  "contract": {
    "name": "DelegatedOptIn",
    "desc": "",
    "methods": [
      {
        "name": "setSigVerificationAddress",
        "args": [
          {
            "name": "lsig",
            "type": "address",
            "desc": "The address of the verifier lsig"
          }
        ],
        "desc": "Set the address of the verifier lsig. This will only be called once after creation.",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "updateAssetMBR",
        "args": [
          {
            "name": "asset",
            "type": "asset",
            "desc": "The asset to opt into and opt out of to determine MBR"
          }
        ],
        "desc": "Updates the asset MBR",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setOpenOptInSignature",
        "args": [
          {
            "name": "sig",
            "type": "byte[64]",
            "desc": "The signature of the lsig"
          },
          {
            "name": "signer",
            "type": "address",
            "desc": "The public key corresponding to the signature"
          },
          {
            "name": "verifier",
            "type": "txn",
            "desc": "A txn from the verifier lsig to verify the signature"
          }
        ],
        "desc": "Set the signature of the lsig for the given account",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "openOptIn",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "Payment to the receiver that covers the ASA MBR"
          },
          {
            "name": "optIn",
            "type": "axfer",
            "desc": "The opt in transaction, presumably from the open opt-in lsig"
          }
        ],
        "desc": "Verifies that the opt in is allowed",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setOpenOptInEndTime",
        "args": [
          {
            "name": "timestamp",
            "type": "uint64",
            "desc": "After this time, opt ins will no longer be allowed"
          }
        ],
        "desc": "Set the timestamp until which the account allows opt ins",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setAddressOptInSignature",
        "args": [
          {
            "name": "sig",
            "type": "byte[64]",
            "desc": "The signature of the lsig"
          },
          {
            "name": "signer",
            "type": "address",
            "desc": "The public key corresponding to the signature"
          },
          {
            "name": "allowedAddress",
            "type": "address",
            "desc": ""
          },
          {
            "name": "verifier",
            "type": "txn",
            "desc": ""
          }
        ],
        "desc": "Set the signature of the lsig for the given account",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "addressOptIn",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "Payment to the receiver that covers the ASA MBR"
          },
          {
            "name": "optIn",
            "type": "axfer",
            "desc": "The opt in transaction, presumably from the address opt-in lsig"
          }
        ],
        "desc": "Verifies that the opt in is allowed from the sender",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setAddressOptInEndTime",
        "args": [
          {
            "name": "timestamp",
            "type": "uint64",
            "desc": "After this time, opt ins will no longer be allowed"
          },
          {
            "name": "allowedAddress",
            "type": "address",
            "desc": "The address to set the end time for"
          }
        ],
        "desc": "Set the timestamp until which the account allows opt ins for a specific address",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}