/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "setSignature(byte[64],pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delegatedOptIn(pay,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unsetSignature()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKCnR4biBBcHBsaWNhdGlvbklECmludCAwCj4KaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoIGNyZWF0ZV9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY2FsbF9Ob09wCgpOT1RfSU1QTEVNRU5URUQ6CgllcnIKCmFiaV9yb3V0ZV9zZXRTaWduYXR1cmU6CglieXRlIDB4Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWNhbGxzdWIgc2V0U2lnbmF0dXJlCglpbnQgMQoJcmV0dXJuCgpzZXRTaWduYXR1cmU6Cglwcm90byAzIDAKCgkvLyBSZWNvcmQgTUJSIGJlZm9yZSBib3hfcHV0IHRvIGxhdGVyIGRldGVybWluZSB0aGUgTUJSIGRlbHRhCgkvLyAuL2NvbnRyYWN0cy9kZWxlZ2F0ZWRfb3B0aW5fYXBwLmFsZ28udHM6MjAKCS8vIHByZU1CUiA9IGdsb2JhbHMuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5taW5CYWxhbmNlCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RNaW5CYWxhbmNlCglhc3NlcnQKCWZyYW1lX2J1cnkgLTMgLy8gcHJlTUJSOiB1aW50NjQKCgkvLyAuL2NvbnRyYWN0cy9kZWxlZ2F0ZWRfb3B0aW5fYXBwLmFsZ28udHM6MjEKCS8vIHRoaXMuc2lnbmF0dXJlcy5zZXQodGhpcy50eG4uc2VuZGVyLCBzaWcpCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gc2lnOiBieXRlWzY0XQoJYm94X3B1dAoKCS8vIFZlcmlmeSBib3ggTUJSIHBheW1lbnQKCS8vIC4vY29udHJhY3RzL2RlbGVnYXRlZF9vcHRpbl9hcHAuYWxnby50czoyNAoJLy8gYXNzZXJ0KGJveE1CUlBheW1lbnQucmVjZWl2ZXIgPT09IGdsb2JhbHMuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcykKCWZyYW1lX2RpZyAtMiAvLyBib3hNQlJQYXltZW50OiBwYXkKCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIC4vY29udHJhY3RzL2RlbGVnYXRlZF9vcHRpbl9hcHAuYWxnby50czoyNQoJLy8gYXNzZXJ0KGJveE1CUlBheW1lbnQuYW1vdW50ID49IGdsb2JhbHMuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5taW5CYWxhbmNlIC0gcHJlTUJSKQoJZnJhbWVfZGlnIC0yIC8vIGJveE1CUlBheW1lbnQ6IHBheQoJZ3R4bnMgQW1vdW50CglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RNaW5CYWxhbmNlCglhc3NlcnQKCWZyYW1lX2RpZyAtMyAvLyBwcmVNQlI6IHVpbnQ2NAoJLQoJPj0KCWFzc2VydAoJcmV0c3ViCgphYmlfcm91dGVfZGVsZWdhdGVkT3B0SW46CgkvLyBubyBkdXBuIG5lZWRlZAoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCgl0eG4gR3JvdXBJbmRleAoJaW50IDIKCS0KCWNhbGxzdWIgZGVsZWdhdGVkT3B0SW4KCWludCAxCglyZXR1cm4KCmRlbGVnYXRlZE9wdEluOgoJcHJvdG8gMiAwCgoJLy8gVmVyaWZ5IHRoYXQgdGhlIHNpZ25hdHVyZSBpcyBwcmVzZW50CgkvLyAuL2NvbnRyYWN0cy9kZWxlZ2F0ZWRfb3B0aW5fYXBwLmFsZ28udHM6MzcKCS8vIGFzc2VydCh0aGlzLnNpZ25hdHVyZXMuZXhpc3RzKG9wdEluLnNlbmRlcikpCglmcmFtZV9kaWcgLTIgLy8gb3B0SW46IGF4ZmVyCglndHhucyBTZW5kZXIKCWJveF9sZW4KCXN3YXAKCXBvcAoJYXNzZXJ0CglyZXRzdWIKCmFiaV9yb3V0ZV91bnNldFNpZ25hdHVyZToKCWJ5dGUgMHgKCWNhbGxzdWIgdW5zZXRTaWduYXR1cmUKCWludCAxCglyZXR1cm4KCnVuc2V0U2lnbmF0dXJlOgoJcHJvdG8gMSAwCgoJLy8gUmVjb3JkIE1CUiBiZWZvcmUgYm94X2RlbCB0byBsYXRlciBkZXRlcm1pbmUgdGhlIE1CUiBkZWx0YQoJLy8gLi9jb250cmFjdHMvZGVsZWdhdGVkX29wdGluX2FwcC5hbGdvLnRzOjQ2CgkvLyBwcmVNQlIgPSBnbG9iYWxzLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MubWluQmFsYW5jZQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQoJYXNzZXJ0CglmcmFtZV9idXJ5IC0xIC8vIHByZU1CUjogdWludDY0CgoJLy8gLi9jb250cmFjdHMvZGVsZWdhdGVkX29wdGluX2FwcC5hbGdvLnRzOjQ3CgkvLyB0aGlzLnNpZ25hdHVyZXMuZGVsZXRlKHRoaXMudHhuLnNlbmRlcikKCXR4biBTZW5kZXIKCWJveF9kZWwKCgkvLyBSZXR1cm4gdGhlIGJveCBNQlIKCS8vIC4vY29udHJhY3RzL2RlbGVnYXRlZF9vcHRpbl9hcHAuYWxnby50czo1MAoJLy8gc2VuZFBheW1lbnQoewoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIC4vY29udHJhY3RzL2RlbGVnYXRlZF9vcHRpbl9hcHAuYWxnby50czo1MQoJLy8gZmVlOiAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyAuL2NvbnRyYWN0cy9kZWxlZ2F0ZWRfb3B0aW5fYXBwLmFsZ28udHM6NTIKCS8vIGFtb3VudDogcHJlTUJSIC0gZ2xvYmFscy5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UKCWZyYW1lX2RpZyAtMSAvLyBwcmVNQlI6IHVpbnQ2NAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQoJYXNzZXJ0CgktCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIC4vY29udHJhY3RzL2RlbGVnYXRlZF9vcHRpbl9hcHAuYWxnby50czo1MwoJLy8gcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBSZWNlaXZlcgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKYWJpX3JvdXRlX2RlZmF1bHRURUFMU2NyaXB0Q3JlYXRlOgoJaW50IDEKCXJldHVybgoKY3JlYXRlX05vT3A6Cgl0eG4gTnVtQXBwQXJncwoJc3dpdGNoIGFiaV9yb3V0ZV9kZWZhdWx0VEVBTFNjcmlwdENyZWF0ZQoJZXJyCgpjYWxsX05vT3A6CgltZXRob2QgInNldFNpZ25hdHVyZShieXRlWzY0XSxwYXkpdm9pZCIKCW1ldGhvZCAiZGVsZWdhdGVkT3B0SW4ocGF5LGF4ZmVyKXZvaWQiCgltZXRob2QgInVuc2V0U2lnbmF0dXJlKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX3NldFNpZ25hdHVyZSBhYmlfcm91dGVfZGVsZWdhdGVkT3B0SW4gYWJpX3JvdXRlX3Vuc2V0U2lnbmF0dXJlCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDkKaW50IDE="
  },
  "contract": {
    "name": "DelegatedOptIn",
    "desc": "",
    "methods": [
      {
        "name": "setSignature",
        "args": [
          {
            "name": "sig",
            "type": "byte[64]",
            "desc": "The signature of the lsig"
          },
          {
            "name": "boxMBRPayment",
            "type": "pay",
            "desc": "Payment to cover the contract MBR for box creation"
          }
        ],
        "desc": "Set the signature of the lsig for the given account",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "delegatedOptIn",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "Payment to the receiver that covers the ASA MBR"
          },
          {
            "name": "optIn",
            "type": "axfer",
            "desc": "The opt in transaction, presumably from the open opt-in lsig"
          }
        ],
        "desc": "Verifies that the opt in is allowed",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "unsetSignature",
        "args": [],
        "desc": "Delete the signature from box storage.This will disable delegated opt-ins and return the box MBR balance",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the DelegatedOptIn smart contract.
 */
export type DelegatedOptIn = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'setSignature(byte[64],pay)void' | 'setSignature', {
      argsObj: {
        /**
         * The signature of the lsig
         */
        sig: Uint8Array
        /**
         * Payment to cover the contract MBR for box creation
         */
        boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [sig: Uint8Array, boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'delegatedOptIn(pay,axfer)void' | 'delegatedOptIn', {
      argsObj: {
        /**
         * Payment to the receiver that covers the ASA MBR
         */
        mbrPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The opt in transaction, presumably from the open opt-in lsig
         */
        optIn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mbrPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, optIn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'unsetSignature()void' | 'unsetSignature', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
}
/**
 * Defines the possible abi call signatures
 */
export type DelegatedOptInSig = keyof DelegatedOptIn['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends DelegatedOptInSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the DelegatedOptIn smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends DelegatedOptInSig> = DelegatedOptIn['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DelegatedOptIn smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DelegatedOptInSig> = DelegatedOptIn['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type DelegatedOptInCreateCalls = (typeof DelegatedOptInCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type DelegatedOptInCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type DelegatedOptInDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: DelegatedOptInCreateCalls) => DelegatedOptInCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class DelegatedOptInCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the DelegatedOptIn smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setSignature(byte[64],pay)void ABI method
   *
   * Set the signature of the lsig for the given account
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setSignature(args: MethodArgs<'setSignature(byte[64],pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setSignature(byte[64],pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.sig, args.boxMBRPayment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the delegatedOptIn(pay,axfer)void ABI method
   *
   * Verifies that the opt in is allowed
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static delegatedOptIn(args: MethodArgs<'delegatedOptIn(pay,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'delegatedOptIn(pay,axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrPayment, args.optIn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unsetSignature()void ABI method
   *
   * Delete the signature from box storage.This will disable delegated opt-ins and return the box MBR balance
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unsetSignature(args: MethodArgs<'unsetSignature()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unsetSignature()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the DelegatedOptIn smart contract
 */
export class DelegatedOptInClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `DelegatedOptInClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof DelegatedOptIn['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the DelegatedOptIn smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: DelegatedOptInDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(DelegatedOptInCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the DelegatedOptIn smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the DelegatedOptIn smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the setSignature(byte[64],pay)void ABI method.
   *
   * Set the signature of the lsig for the given account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setSignature(args: MethodArgs<'setSignature(byte[64],pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatedOptInCallFactory.setSignature(args, params))
  }

  /**
   * Calls the delegatedOptIn(pay,axfer)void ABI method.
   *
   * Verifies that the opt in is allowed
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public delegatedOptIn(args: MethodArgs<'delegatedOptIn(pay,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatedOptInCallFactory.delegatedOptIn(args, params))
  }

  /**
   * Calls the unsetSignature()void ABI method.
   *
   * Delete the signature from box storage.This will disable delegated opt-ins and return the box MBR balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unsetSignature(args: MethodArgs<'unsetSignature()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatedOptInCallFactory.unsetSignature(args, params))
  }

  public compose(): DelegatedOptInComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setSignature(args: MethodArgs<'setSignature(byte[64],pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setSignature(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      delegatedOptIn(args: MethodArgs<'delegatedOptIn(pay,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.delegatedOptIn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unsetSignature(args: MethodArgs<'unsetSignature()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unsetSignature(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as DelegatedOptInComposer
  }
}
export type DelegatedOptInComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setSignature(byte[64],pay)void ABI method.
   *
   * Set the signature of the lsig for the given account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setSignature(args: MethodArgs<'setSignature(byte[64],pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): DelegatedOptInComposer<[...TReturns, MethodReturn<'setSignature(byte[64],pay)void'>]>

  /**
   * Calls the delegatedOptIn(pay,axfer)void ABI method.
   *
   * Verifies that the opt in is allowed
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delegatedOptIn(args: MethodArgs<'delegatedOptIn(pay,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): DelegatedOptInComposer<[...TReturns, MethodReturn<'delegatedOptIn(pay,axfer)void'>]>

  /**
   * Calls the unsetSignature()void ABI method.
   *
   * Delete the signature from box storage.This will disable delegated opt-ins and return the box MBR balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unsetSignature(args: MethodArgs<'unsetSignature()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): DelegatedOptInComposer<[...TReturns, MethodReturn<'unsetSignature()void'>]>

  /**
   * Makes a clear_state call to an existing instance of the DelegatedOptIn smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): DelegatedOptInComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): DelegatedOptInComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<DelegatedOptInComposerResults<TReturns>>
}
export type DelegatedOptInComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
